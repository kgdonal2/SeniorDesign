from machine import Pin, UART
import utime

TRANS = 1
RECIEVE = 0

uart = UART(1, baudrate=9600, tx=8, rx=9)
uart.init(bits=8, parity=None, stop=1)

enable_DE_pin = 7 # Drive HIGH to enable Driver
enable_RE_pin = 6 # Drive LOW to enable receiver


def calculate_crc(data):
    crc = 0xFFFF
    for byte in data:
        crc ^= byte
        for _ in range(8):
            if crc & 0x0001:
                crc >>= 1
                crc ^= 0xA001
            else:
                crc >>= 1
    return crc.to_bytes(2, 'little')  # Using 'little' endianness for correct byte order


   
  
    
def sendout():
    #utime.sleep(5)
    DE_enable.value(TRANS)
    RE_enable.value(TRANS)
    read_data_command = b'\xFF\x03\x00\x00\x00\x02'
    crc = calculate_crc(read_data_command)
    read_data_command += crc
    print("Sending data:", read_data_command)
    print(" ")
    
    uart.write(read_data_command)
    
def read_in():
    utime.sleep(2)
    DE_enable.value(RECIEVE)
    RE_enable.value(RECIEVE)
    if uart.any():
        data = uart.read()
        print("Received data:", " ".join(hex(byte) for byte in data))
    else:
        print("No data received")
    print(" ")
    utime.sleep(1)

if __name__ == "__main__":
    DE_enable = Pin(enable_DE_pin, Pin.OUT)
    RE_enable = Pin(enable_RE_pin, Pin.OUT)
    
    DE_enable.value(TRANS)
    RE_enable.value(TRANS)
    while True:
        DE_enable.value(TRANS)
        RE_enable.value(TRANS)
        sendout()
        DE_enable.value(RECIEVE)
        RE_enable.value(RECIEVE)
        read_in()

